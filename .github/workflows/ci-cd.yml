name: AI Caller CI/CD Pipeline

on:
  push:
    branches: [ main, sandbox1 ]
  pull_request:
    branches: [ main, sandbox1 ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - sandbox
        - production

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Code Quality & Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          # Check if ESLint is configured
          if [ -f ".eslintrc.json" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc" ]; then
            echo "‚úÖ ESLint configuration found, running linting..."
            npm run lint --silent || echo "‚ö†Ô∏è  Linting issues found (non-blocking)"
          else
            echo "‚ö†Ô∏è  No ESLint configuration found, skipping linting..."
            echo "This is normal for new Next.js projects"
          fi
        continue-on-error: true

      - name: Run TypeScript type check
        run: npm run typecheck || echo "‚ö†Ô∏è  TypeScript check failed (non-blocking)"
        continue-on-error: true

      - name: Check for security vulnerabilities
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level moderate || {
            echo "‚ö†Ô∏è  Security vulnerabilities found (non-blocking)"
            echo "üìã Vulnerabilities summary:"
            npm audit --audit-level moderate --json | jq -r '.metadata.vulnerabilities | "Critical: \(.critical // 0), High: \(.high // 0), Moderate: \(.moderate // 0), Low: \(.low // 0)"' || echo "Could not parse audit results"
          }
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated || true

  # Build & Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create environment file for testing
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:5000" > .env.local
          echo "FRONTEND_URL=http://localhost:3000" >> .env.local
          echo "NODE_ENV=test" >> .env.local
          echo "DB_HOST=localhost" >> .env.local
          echo "DB_USER=test_user" >> .env.local
          echo "DB_PASSWORD=test_password" >> .env.local
          echo "DB_NAME=ai_caller_test" >> .env.local
          echo "JWT_SECRET=test-secret-key" >> .env.local

      - name: Build Next.js application
        run: npm run build

      - name: Run tests (if available)
        run: npm test || echo "No tests configured yet"

      - name: Check build output
        run: |
          if [ -d ".next" ]; then
            echo "‚úÖ Next.js build successful"
            ls -la .next/
          else
            echo "‚ùå Next.js build failed"
            exit 1
          fi

  # Database Schema Validation
  database-check:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check database configuration
        run: |
          echo "üîç Checking database configuration..."
          if grep -q "CREATE TABLE" server.js; then
            echo "‚úÖ Database schema definitions found in server.js"
            grep -n "CREATE TABLE" server.js | head -5
          else
            echo "‚ö†Ô∏è  No CREATE TABLE statements found in server.js"
          fi

      - name: Check environment variables
        run: |
          echo "üîç Checking environment configuration..."
          if [ -f ".env.local" ]; then
            echo "‚úÖ .env.local file exists"
            echo "üìã Environment variables:"
            grep -v "^#" .env.local | grep -v "^$" || echo "No environment variables found"
          else
            echo "‚ö†Ô∏è  .env.local file not found"
          fi

  # Security & Dependency Analysis
  security-scan:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Check for sensitive data in code
        run: |
          echo "üîç Scanning for potential sensitive data..."
          if grep -r -i "password\|secret\|key\|token" src/ --exclude-dir=node_modules | grep -v "process.env" | head -10; then
            echo "‚ö†Ô∏è  Potential sensitive data found in source code"
          else
            echo "‚úÖ No obvious sensitive data found in source code"
          fi

  # Performance & Bundle Analysis
  performance-check:
    name: Performance & Bundle Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for analysis
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "üìä Bundle analysis..."
          if [ -d ".next" ]; then
            echo "üìÅ Next.js build directory size:"
            du -sh .next/
            echo "üìÅ Static files:"
            du -sh .next/static/ || echo "No static files found"
          fi

      - name: Check for large dependencies
        run: |
          echo "üì¶ Checking for large dependencies..."
          npm list --depth=0 | grep -E "MB|KB" | head -10 || echo "No size information available"

  # Deployment Preparation
  deployment-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, database-check, security-scan, performance-check]
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/sandbox1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create production environment file
        run: |
          echo "üîß Creating production environment configuration..."
          if [ "${{ github.event.inputs.environment }}" = "production" ] || [ "${{ github.ref_name }}" = "main" ]; then
            echo "NEXT_PUBLIC_API_BASE_URL=https://aidial.in" > .env.production
            echo "FRONTEND_URL=https://aidial.in" >> .env.production
            echo "NODE_ENV=production" >> .env.production
            echo "DB_HOST=193.203.166.175" >> .env.production
            echo "DB_USER=u406732176_aicaller" >> .env.production
            echo "DB_PASSWORD=Aicaller@1234" >> .env.production
            echo "DB_NAME=u406732176_aicaller" >> .env.production
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.production
            echo "‚úÖ Production environment file created for main branch"
          elif [ "${{ github.event.inputs.environment }}" = "sandbox" ] || [ "${{ github.ref_name }}" = "sandbox1" ]; then
            echo "NEXT_PUBLIC_API_BASE_URL=https://sandbox.aidial.in" > .env.sandbox
            echo "FRONTEND_URL=https://sandbox.aidial.in" >> .env.sandbox
            echo "NODE_ENV=sandbox" >> .env.sandbox
            echo "DB_HOST=193.203.166.175" >> .env.sandbox
            echo "DB_USER=u406732176_aicaller" >> .env.sandbox
            echo "DB_PASSWORD=Aicaller@1234" >> .env.sandbox
            echo "DB_NAME=u406732176_aicaller" >> .env.sandbox
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.sandbox
            echo "‚úÖ Sandbox environment file created for sandbox1 branch"
          else
            echo "NEXT_PUBLIC_API_BASE_URL=https://staging.aidial.in" > .env.staging
            echo "FRONTEND_URL=https://staging.aidial.in" >> .env.staging
            echo "NODE_ENV=staging" >> .env.staging
            echo "‚úÖ Staging environment file created"
          fi

      - name: Build for deployment
        run: npm run build

      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package..."
          # Determine which environment file to include
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV_FILE=".env.production"
          elif [ "${{ github.ref_name }}" = "sandbox1" ]; then
            ENV_FILE=".env.sandbox"
          else
            ENV_FILE=".env.staging"
          fi
          
          echo "üìÅ Including environment file: $ENV_FILE"
          tar -czf ai-caller-deployment.tar.gz \
            .next/ \
            public/ \
            src/ \
            server.js \
            package.json \
            package-lock.json \
            $ENV_FILE \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.github

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: ai-caller-deployment
          path: ai-caller-deployment.tar.gz

      - name: Generate deployment summary
        run: |
          echo "üìã Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "=====================" >> $GITHUB_STEP_SUMMARY
          # Determine environment for summary
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV_NAME="production"
          elif [ "${{ github.ref_name }}" = "sandbox1" ]; then
            ENV_NAME="sandbox"
          else
            ENV_NAME="${{ github.event.inputs.environment || 'staging' }}"
          fi
          echo "- **Environment**: $ENV_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ai-caller-deployment.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üöÄ Ready for deployment!" >> $GITHUB_STEP_SUMMARY

  # Final Status Check
  final-status:
    name: Final Status
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, database-check, security-scan, performance-check, deployment-prep]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "üìä Pipeline Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "=========================" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.code-quality.result }}" = "success" ]; then
            echo "- ‚úÖ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "- ‚úÖ Build & Test: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Build & Test: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.database-check.result }}" = "success" ]; then
            echo "- ‚úÖ Database Check: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Database Check: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "- ‚úÖ Security Scan: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Security Scan: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-check.result }}" = "success" ]; then
            echo "- ‚úÖ Performance Check: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Performance Check: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deployment-prep.result }}" = "success" ]; then
            echo "- ‚úÖ Deployment Prep: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Deployment Prep: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deployment-prep.result }}" = "success" ]; then
            echo "üéâ **All checks passed! Ready for deployment.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Some checks failed. Please review before deployment.**" >> $GITHUB_STEP_SUMMARY
          fi
